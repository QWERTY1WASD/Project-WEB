import asyncio
import random

from data.system_functions import *

from telegram import ReplyKeyboardMarkup, StickerSet, Update
from telegram.ext import ConversationHandler
from config import FULL_NAME, REGISTER_WORDS, LOGIN_WORDS, MURAD_TEXT_PATH


def load_texts():
    lst = [MURAD_TEXT_PATH]
    texts = []
    for filename in lst:
        with open(filename, encoding='utf-8') as f:
            texts.append(f.readlines())
    return texts


MURAD_TEXT = load_texts()[0]
# Add a keyboards
reply_keyboard_not_login = [['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è']]
markup_not_login = ReplyKeyboardMarkup(
    reply_keyboard_not_login,
    one_time_keyboard=False,
    resize_keyboard=True
)
reply_keyboard_is_login = [['/logout']]
markup_is_login = ReplyKeyboardMarkup(
    reply_keyboard_is_login,
    one_time_keyboard=False,
    resize_keyboard=True
)
reply_keyboard_stop = [['/stop']]
markup_stop = ReplyKeyboardMarkup(
    reply_keyboard_stop,
    one_time_keyboard=False,
    resize_keyboard=True
)


def change_keyboard(tg_user_id):
    if get_current_user(tg_user_id) is None:
        return markup_not_login
    else:
        return markup_is_login


async def handle_messages(update, context):
    text = update.message.text.lower()
    if text in REGISTER_WORDS:
        return asyncio.create_task(register_user(update, context))
    elif text in LOGIN_WORDS:
        return asyncio.create_task(login_user(update, context))

    user = get_current_user(update.message.from_user.id)
    if user is None:
        await update.message.reply_text(
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å! ‚ùå‚ùå‚ùå –ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å"
        )
        return
    else:
        await update.message.reply_text(
            random.choice(MURAD_TEXT).replace('{REPLACE}', user.name)
        )
    # await update.message.reply_text(text)


async def start(update: Update, context):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç üëã, –º–µ–Ω—è –∑–æ–≤—É—Ç {FULL_NAME}. "
        f"–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üíº. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=change_keyboard(update.message.from_user.id)
    )


async def help(update, context):
    await update.message.reply_text("HEEEELLLPP üò≠.")


async def register_user(update, context):
    if get_current_user(update.message.from_user.id) is not None:
        await update.message.reply_text("‚ùå –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        return ConversationHandler.END
    await update.message.reply_text("üßê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º ->", reply_markup=markup_stop)
    return 'get_r_nickname'


async def get_r_nickname(update, context):
    nickname = update.message.text
    if is_nickname_unique(nickname):
        await update.message.reply_text(f"{nickname}... –•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä.")
        context.user_data['nickname'] = nickname
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å >.<")
        return 'get_r_password'
    await update.message.reply_text(f"–ù–∏–∫–Ω–µ–π–º '{nickname}' —É–∂–µ –∑–∞–Ω—è—Ç((( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    return 'get_r_nickname'


async def get_r_password(update, context):
    password = update.message.text
    context.user_data['password'] = password
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å..")
    return 'get_repeat_password'


async def get_repeat_password(update, context):
    repeat_password = update.message.text
    if context.user_data['password'] != repeat_password:
        context.user_data['password'] = None
        await update.message.reply_text("–û—à–∏–±–∫–∞–∞–∞. –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!!! –ï—â—ë —Ä–∞–∑.")
        return 'get_r_password'
    await update.message.reply_text(
        "Ok. –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞)"
    )
    return 'get_name'


async def get_name(update, context):
    name = update.message.text
    context.user_data['name'] = name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é")
    return 'get_surname'


async def get_surname(update, context):
    surname = update.message.text
    context.user_data['surname'] = surname
    await update.message.reply_text(f"{context.user_data['nickname']}! –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì≤")
    return 'get_phone'


async def get_phone(update, context):  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ö–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    phone = update.message.text
    context.user_data['phone'] = phone
    context.user_data['tg_id'] = update.message.from_user.id
    register(context.user_data)
    await update.message.reply_text("...")
    await update.message.reply_text(
        "–£—Å–ø–µ—Ö. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è üòò",
        reply_markup=change_keyboard(update.message.from_user.id)
    )
    return ConversationHandler.END


async def stop(update, context):
    await update.message.reply_text(
        "–ù—É –±–ª–∏–Ω! ü§¨",
        reply_markup=change_keyboard(update.message.from_user.id)
    )
    return ConversationHandler.END


async def login_user(update, context):
    if get_current_user(update.message.from_user.id) is not None:
        await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ üòµ")
        return ConversationHandler.END
    await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.,. ü§î")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º: ", reply_markup=markup_stop)
    return 'get_l_nickname'


async def get_l_nickname(update, context):
    nickname = update.message.text
    context.user_data['nickname'] = nickname
    await update.message.reply_text(f"{nickname}, –Ω–∞–¥–µ—é—Å—å —Ç—ã –ø–æ–º–Ω–∏—à—å –ø–∞—Ä–æ–ª—å!")
    return 'get_l_password'


async def get_l_password(update, context):
    password = update.message.text
    context.user_data['password'] = password
    context.user_data['tg_id'] = update.message.from_user.id
    user_req = login(context.user_data)
    if not user_req:
        await update.message.reply_text("–ê–≥–∞!!! üòé —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!!! –ï—â—ë —Ä–∞–∑–æ–∫ >>> ")
        return 'get_l_password'
    await update.message.reply_text(
        "–í—Å—ë –Ω–æ—Ä–º üòö",
        reply_markup=change_keyboard(update.message.from_user.id)
    )
    return ConversationHandler.END


async def logout_user(update, context):
    logout(update.message.from_user.id)
    await update.message.reply_text(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞! –ü–æ–∫–∞ ü•∫",
        reply_markup=change_keyboard(update.message.from_user.id)
    )


async def say_hello(update, context):
    user = get_current_user(update.message.from_user.id)
    if user is None:
        await update.message.reply_text("–ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
        return
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.fio}")


async def get_info(update, context):
    user = get_current_user(update.message.from_user.id)
    if user is None:
        await update.message.reply_text("–ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
        return
    text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={user.id} ** –ù–∏–∫–Ω–µ–π–º: {user.nickname} ** ' \
           f'–ò–º—è: {user.name} ** –§–∞–º–∏–ª–∏—è: {user.surname} ** ' \
           f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone} ** {user.nickname}, –¥–æ–≤–æ–ª–µ–Ω üßê?'
    await update.message.reply_text(text.replace(' ** ', '\n'))
