import asyncio
import random
import requests

from data.system_functions import *

from telegram import ReplyKeyboardMarkup, Update, KeyboardButton
from telegram.ext import ConversationHandler
from constants import *


murad_text = going_to_the_river_text = flarakrad_text = ''
poems_list = []


def load_texts():
    global murad_text, going_to_the_river_text, flarakrad_text, poems_list

    lst = [MURAD_TEXT_PATH, GOING_TO_THE_RIVER_PATH, FLARAKRAD_PATH]
    texts = []
    for filename in lst:
        with open(filename, encoding='utf-8') as f:
            texts.append(f.readlines())
    with open(POEMS_PATH, encoding='utf-8') as f_poems:
        texts.append(f_poems.read().split(POEMS_SEPARATOR))
    murad_text, going_to_the_river_text, flarakrad_text, poems_list = texts


load_texts()
# Add a keyboards
reply_keyboard_not_login = [['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è']]
markup_not_login = ReplyKeyboardMarkup(
    reply_keyboard_not_login,
    one_time_keyboard=False,
    resize_keyboard=True
)
reply_keyboard_is_login = [
    ['–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞ ü§î', '–°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ üåç', '–°–ª—É—á–∞–π–Ω–∞—è –ø–æ—ç–º–∞ üìñ'],
    ['–ü–æ–∑–≤–∞—Ç—å –ú—É—Ä–∞–¥–∞ üîû', '–ü–æ–∑–≤–∞—Ç—å –∏–¥—É—â–µ–≥–æ –∫ —Ä–µ–∫–µ', '–ü–æ–∑–≤–∞—Ç—å FlaRakRad', '–°–ª—É—à–∞—Ç—å —ç—Ö–æ'],
    ['–ò–Ω—Ñ–æ', '–í—ã—Ö–æ–¥ ', '–ü–æ–º–æ—â—å üÜò']
]
markup_main_keyboard = ReplyKeyboardMarkup(
    reply_keyboard_is_login,
    one_time_keyboard=False,
    resize_keyboard=True,
    is_persistent=True
)
reply_keyboard_stop = [['/stop']]
markup_stop = ReplyKeyboardMarkup(
    reply_keyboard_stop,
    one_time_keyboard=False,
    resize_keyboard=True
)
request_contact_markup = ReplyKeyboardMarkup([[
    KeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)]],
    one_time_keyboard=False,
    resize_keyboard=True)


async def request_contact(update, context):
    await update.message.reply_text(
        f"gggive youuur numbberrr",
        reply_markup=request_contact_markup
    )
    a = Update.message
    await update.message.reply_text(f'{Update.message.contact.phone_number}')


def change_keyboard(tg_user_id):
    if get_current_user(tg_user_id) is None:
        return markup_not_login
    else:
        return markup_main_keyboard


async def handle_messages(update, context):
    text = update.message.text.lower()
    if text in REGISTER_WORDS:
        return asyncio.create_task(register_user(update, context))
    elif text in LOGIN_WORDS:
        return asyncio.create_task(login_user(update, context))
    user = get_current_user(update.message.from_user.id)
    if user is None:
        await update.message.reply_text(
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å! ‚ùå‚ùå‚ùå –ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
        return
    elif text in EXIT_WORDS:
        return asyncio.create_task(logout_user(update, context))
    elif text in INFO_WORDS:
        return asyncio.create_task(user_info(update, context))
    elif text in RANDOM_CASE_WORDS:
        return asyncio.create_task(generate_random_case(update, context))
    elif text in RANDOM_PLACE_WORDS:
        return asyncio.create_task(get_random_place(update, context))
    elif text in RANDOM_POEM_WORDS:
        asyncio.create_task(print_random_poem(update, context))
        return
    elif text in HELP_WORDS:
        asyncio.create_task(help(update, context))
        return
    companion = user.selected_companion
    if text in CHANGE_COMPANION:
        companion = COMPANIONS[CHANGE_COMPANION.index(text)]
        change_selected_companion(user.telegram_id, companion)
        await update.message.reply_text('–°–µ–π—á–∞—Å –≤—Å—ë –±—É–¥–µ—Ç..')
    if companion == COMPANIONS[0]:
        current_text = murad_text
    elif companion == COMPANIONS[1]:
        current_text = going_to_the_river_text
    elif companion == COMPANIONS[2]:
        current_text = flarakrad_text
    else:
        await update.message.reply_text(update.message.text)
        return
    text = random.choice(current_text).replace('{REPLACE}', user.name)
    try:
        while text == context.user_data['text']:
            text = random.choice(current_text).replace('{REPLACE}', user.name)  # –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    except KeyError:
        context.user_data['text'] = ' '
    await update.message.reply_text(text)
    context.user_data['text'] = text


async def start(update: Update, context):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç üëã, –º–µ–Ω—è –∑–æ–≤—É—Ç {FULL_NAME}. "
        f"–° –Ω–∞–º–∏ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –í–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=change_keyboard(update.message.from_user.id)
    )


async def help(update, context):
    await update.message.reply_text(HELP_TEXT)


async def register_user(update, context):
    if get_current_user(update.message.from_user.id) is not None:
        await update.message.reply_text("‚ùå –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        return ConversationHandler.END
    await update.message.reply_text("üßê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º ‚úçÔ∏è(‚óî‚ó°‚óî) ->", reply_markup=markup_stop)
    return 'get_r_nickname'


async def get_r_nickname(update, context):
    nickname = update.message.text
    if is_nickname_unique(nickname):
        await update.message.reply_text(f"{nickname}... –•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä.")
        context.user_data['nickname'] = nickname
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å >.<")
        return 'get_r_password'
    await update.message.reply_text(f"–ù–∏–∫–Ω–µ–π–º '{nickname}' —É–∂–µ –∑–∞–Ω—è—Ç((( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    return 'get_r_nickname'


async def get_r_password(update, context):
    password = update.message.text
    context.user_data['password'] = password
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å..")
    return 'get_repeat_password'


async def get_repeat_password(update, context):
    repeat_password = update.message.text
    if context.user_data['password'] != repeat_password:
        context.user_data['password'] = None
        await update.message.reply_text("–û—à–∏–±–∫–∞–∞–∞. –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!!! –ï—â—ë —Ä–∞–∑.")
        return 'get_r_password'
    await update.message.reply_text(
        "Ok. –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞)"
    )
    return 'get_name'


async def get_name(update, context):
    name = update.message.text
    context.user_data['name'] = name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é")
    return 'get_surname'


async def get_surname(update, context):
    surname = update.message.text
    context.user_data['surname'] = surname
    await update.message.reply_text(
        f"{context.user_data['nickname']}! –°–∫–∏–Ω—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì≤ (–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É)",
        reply_markup=request_contact_markup)
    return 'get_phone'


async def get_phone(update, context):  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ö–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    phone = update.message.contact.phone_number
    context.user_data['phone'] = phone
    context.user_data['tg_id'] = update.message.from_user.id
    register(context.user_data)
    await update.message.reply_text("...")
    await update.message.reply_text(
        "–£—Å–ø–µ—Ö. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è üòò",
        reply_markup=change_keyboard(update.message.from_user.id)
    )
    return ConversationHandler.END


async def stop(update, context):
    await update.message.reply_text(
        "–ù—É –±–ª–∏–Ω! ü§¨",
        reply_markup=change_keyboard(update.message.from_user.id)
    )
    return ConversationHandler.END


async def login_user(update, context):
    if get_current_user(update.message.from_user.id) is not None:
        await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ üòµ")
        return ConversationHandler.END
    await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.,. ü§î")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º: ", reply_markup=markup_stop)
    return 'get_l_nickname'


async def get_l_nickname(update, context):
    nickname = update.message.text
    context.user_data['nickname'] = nickname
    await update.message.reply_text(f"{nickname}, –Ω–∞–¥–µ—é—Å—å —Ç—ã –ø–æ–º–Ω–∏—à—å –ø–∞—Ä–æ–ª—å!")
    return 'get_l_password'


async def get_l_password(update, context):
    password = update.message.text
    context.user_data['password'] = password
    context.user_data['tg_id'] = update.message.from_user.id
    user_req = login(context.user_data)
    if not user_req:
        await update.message.reply_text("–ê–≥–∞!!! üòé —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!!! –ï—â—ë —Ä–∞–∑–æ–∫ >>> ")
        return 'get_l_password'
    await update.message.reply_text(
        "–í—Å—ë –Ω–æ—Ä–º üòö",
        reply_markup=change_keyboard(update.message.from_user.id)
    )
    return ConversationHandler.END


async def logout_user(update, context):
    user = get_current_user(update.message.from_user.id)
    if user is None:
        await update.message.reply_text("–ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
        return
    logout(user)
    await update.message.reply_text(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞! –ü–æ–∫–∞ ü•∫",
        reply_markup=change_keyboard(update.message.from_user.id)
    )


async def user_info(update, context):
    user = get_current_user(update.message.from_user.id)
    if user is None:
        await update.message.reply_text("–ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
        return
    text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={user.id} ** –ù–∏–∫–Ω–µ–π–º: {user.nickname} ** ' \
           f'–ò–º—è: {user.name} ** –§–∞–º–∏–ª–∏—è: {user.surname} ** ' \
           f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone} ** ' \
           f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {user.created_date} ** ' \
           f'–ü–∞—Ä–æ–ª—å: –ë–ª–∏–Ω... –æ–Ω —Ö—ç—à–∏—Ä—É–µ—Ç—Å—è ** {user.nickname}, –¥–æ–≤–æ–ª–µ–Ω üßê?'
    await update.message.reply_text(text.replace(' ** ', '\n'))


async def print_random_poem(update, context):
    user = get_current_user(update.message.from_user.id)
    if user is None:
        await update.message.reply_text("–ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
        return
    poem = random.choice(poems_list)
    await update.message.reply_text(poem.replace('{REPLACE}', user.name), parse_mode="Markdown")


async def generate_random_case(update, context):
    if get_current_user(update.message.from_user.id) is None:
        await update.message.reply_text("–ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
        return
    first_number = random.randint(0, 100)
    second_number = random.randint(0, 100)
    sign = random.choice(['+', '-', '*'])
    text = f'{first_number} {sign} {second_number}'
    context.user_data['answer'] = eval(text)
    await update.message.reply_text(f'–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {text}? ü§î')
    return 'get_user_answer'


async def get_user_answer(update, context):
    user_answer = update.message.text
    if user_answer.strip() == str(context.user_data["answer"]):
        await update.message.reply_text('–ú–æ–ª–æ–¥–µ—Ü üòö')
    else:
        await update.message.reply_text(f'–•–ê–•–ê–•–ê –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë—É–¥–µ—Ç {context.user_data["answer"]}')
    return ConversationHandler.END


async def get_random_place(update, context):
    if get_current_user(update.message.from_user.id) is None:
        await update.message.reply_text("–ó–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
        return
    try:
        map_request = "http://static-maps.yandex.ru/1.x/"
        ll = (random.randint(MIN_AND_MAX_LONGITUDE[0], MIN_AND_MAX_LONGITUDE[1]) / 100,
              random.randint(MIN_AND_MAX_LONGITUDE[0], MIN_AND_MAX_LONGITUDE[1]) / 100)
        spn = random.randint(MIN_AND_MAX_SCALE[0], MIN_AND_MAX_SCALE[1]) / 100
        response = requests.get(map_request, params={
            'll': f'{ll[0]},{ll[1]}',
            'spn': f'{spn},{spn}',
            'l': 'sat,skl'
        })
        await update.message.reply_text(f'üßê –°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {ll[0]}, {ll[1]}. '
                                        f'–ú–∞—Å—à—Ç–∞–±: {spn}')
        await update.message.reply_photo(response.content)
    except Exception:
        await update.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!!!')


# Admins only
async def get_all_users_info(update, context):
    user = get_current_user(update.message.from_user.id)
    await update.message.reply_text("–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º...")
    if not user.is_admin:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π!!!")
    else:
        users_data = get_all_users(update.message.from_user.id)
        await update.message.reply_text('\n'.join(f"{user.id}. {user}" for user in users_data))


async def reload_data(update, context):
    user = get_current_user(update.message.from_user.id)
    await update.message.reply_text("–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º...")
    if not user.is_admin:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π!!!")
        return
    try:
        load_texts()
    except Exception as e:
        await update.message.reply_text(f"ERROR!!!: {e}")
    else:
        await update.message.reply_text("–í—Å—ë –æ–∫")


async def info_bot(update, context):
    await update.message.reply_text(f"""
–¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç: {FULL_NAME},
–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª: {DEV_NAME},
Git Hub: {DEV_GIT_HUB},
–¢–µ–ª–µ–≥—Ä–∞–º-id: {DEV_TG_NAME}
(–ü–∏—à–∏—Ç–µ, –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)

–í–µ—Ä—Å–∏—è: {VERSION}
–°–ø–∞—Å–∏–±–æ, –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!
    """)
